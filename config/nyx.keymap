#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "helper.h"
#include "keypos_64keys.h"

#define DEFAULT 0
#define LOWER   1
#define UPPER   2

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>

&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <500>;    // 40
  delay-ms = <0>;                   // 0
};

&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <40>;      // 500
  delay-ms = <0>;                   // 10
};

#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

/* Homerow mods */

#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LN6 LT0 LT1 LT2 LT3 LT4 LT5 LT6 LM0 LM1 LM2 LM3 LM4 LM5 LM6 LB0 LB1 LB2 LB3 LB4 LB5 LB6  // left hand
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RN6 RT0 RT1 RT2 RT3 RT4 RT5 RT6 RM0 RM1 RM2 RM3 RM4 RM5 RM6 RB0 RB1 RB2 RB3 RB4 RB5 RB6  // right hand
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3                                     // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo

/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)


// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
)

// Windows sleep key
ZMK_BEHAVIOR(win_sleep, macro,
    wait-ms = <500>;
    tap-ms = <50>;
    bindings = <&kp LG(X) &kp U &kp S>;
)

// tap: copy | double-tap: cut
ZMK_BEHAVIOR(copy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

// tap: paste | double-tap: INS
ZMK_BEHAVIOR(paste_ins, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LS(INS)>, <&kp INS>;
)

/ {
    behaviors {
        // This is mod-tap with the "balanced" flavor.
        // Improves the '&mt RCTRL SPACE' behavior when typing quickly.

        bmt: balanced_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // | `       | 1    | 2    | 3      | 4       | 5       | -          | =              | 6          | 7       | 8       | 9     | 0      | -       |
            // | [       | Q    | W    | E      | R       | T       | //         | \\             | Y          | U       | I       | O     | P      | ]       |
            // | (       | A    | S    | D      | F       | G       | ESC        | TAB            | H          | J       | K       | L     | ;      | )       |
            // | LSHIFT  | Z    | X    | C      | V       | B       | DEL        | BSPC           | N          | M       | ,       | .     | '      | RSHIFT  |
            // |         |      |      | LGUI   | FN      | LCTL    | LALT       | SPC / RCTL     | RET        | RCTL    | RALT    |       |        |         |

            bindings = <
&kp GRAVE        &kp N1  &kp N2       &kp N3        &kp N4        &kp N5     &kp C_VOL_UP            &kp C_VOLUME_DOWN     &kp N6     &kp N7           &kp N8       &kp N9      &kp N0     &kp MINUS
&kp EQUAL        &kp Q   &kp W        &kp F         &kp P         &kp B      &kp C_MUTE              &kp C_PLAY_PAUSE      &kp J      &kp L            &kp U        &kp Y       &kp LBKT   &kp RBKT
&kp SEMI         &kp A   &hml LALT R  &hml LCTRL S  &hml LSHFT T  &kp G      &kp LGUI                &kp RGUI              &kp M      &hmr RSHFT N     &hmr RCTRL E &hmr RALT I &kp O      &kp APOS
&kp PRINTSCREEN  &kp Z   &kp X        &kp D         &kp C         &kp V      &copy_cut               &swapper              &kp K      &kp H            &kp COMMA    &kp DOT     &kp FSLH   &kp BACKSLASH
                                      &kp TAB       &lt 1 SPACE   &lt 2 RET  &kp ESC                 &paste_ins            &lt 4 RET  &lt 3 BACKSPACE  &kp DELETE
            >;
        };

        nav_layer {
            // |      | F1   | F2     | F3      | F4     | F5  |      |      | F6      | F7     | F8     | F9      | F10   | F11   |
            // |      |      |        | PG UP   |        |     |      |      |         |        | ↑      |         |       | F12   |
            // |      |      | HOME   | PG DOWN | END    |     |      |      |         | ←      | ↓      | →       |       |       |
            // |      |      |        |         |        |     |      |      |         |        |        |         |       |       |
            // |      |      |        |         |        |     |      |      | SPC     |        |        |         |       |       |

            bindings = <
&trans  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5  &trans    &trans     &kp F6         &kp F7      &kp F8     &kp F9     &kp F10    &kp F11
&trans  &trans    &trans    &trans     &trans     &trans  &trans    &trans     &trans         &kp HOME    &kp PG_DN  &kp PG_UP  &kp END    &kp F12
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans  &trans    &trans     &trans         NAV_LEFT    NAV_DOWN   NAV_UP     NAV_RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans    &trans     &trans         &trans      &trans     &trans     &trans     &trans
                            &trans     &trans     &trans  &trans    &kp SPACE  NAV_BSPC       NAV_DEL     &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans    &trans  &trans     &trans            &trans            &trans          &trans             &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans    &trans  &trans     &trans            &trans            &trans          &trans             &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &trans    &trans  &trans     &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT    &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans    &trans  &trans     &msc SCRL_LEFT    &msc SCRL_DOWN    &msc SCRL_UP    &msc SCRL_RIGHT    &trans
                            &trans     &trans     &trans  &trans    &trans  &mkp LCLK  &mkp MCLK         &mkp RCLK
            >;
        };

        num_layer {
            bindings = <
&trans  &trans        &trans  &trans         &trans  &trans            &trans    &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp KP_MINUS  &kp N7  &kp N4         &kp N1  &kp KP_ASTERISK   &trans    &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp KP_PLUS   &kp N8  &kp N5         &kp N2  &kp KP_EQUAL      &trans    &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp COMMA     &kp N9  &kp N6         &kp N3  &kp KP_SLASH      &trans    &trans  &trans  &trans     &trans     &trans    &trans    &trans
                              &kp LESS_THAN  &kp N0  &kp GREATER_THAN  &trans    &trans  &trans  &trans     &trans
            >;
        };

        sym_layer {
            bindings = <
&trans        &trans       &trans       &trans         &trans                &trans                 &trans    &trans  &trans  &trans     &trans     &trans    &trans    &trans
&kp QUESTION  &kp PERCENT  &kp DOLLAR   &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans    &trans  &trans  &trans     &trans     &trans    &trans    &trans
&kp COLON     &kp AT    &kp EXCL        &kp ASTERISK   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans    &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&kp TILDE     &kp HASH  &kp CARET       &kp PIPE       &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans    &trans  &trans  &trans     &trans     &trans    &trans    &trans
                                        &trans         &trans                &trans                 &trans    &trans  &trans  &trans     &trans
            >;
        };

        upper_layer {
            // | BT_CLR   | BT_SEL 0   | BT_SEL 1   | BT_SEL 2   | BT_SEL 3   | BT_SEL 4   |      |      |      |      |      |      |      |      |
            // |          |            |            |            |            |            |      |      |      |      |      |      |      |      |
            // |          |            |            |            |            |            |      |      |      |      |      |      |      |      |
            // |          |            |            |            |            |            |      |      |      |      |      |      |      |      |
            // |          |            |            |            |            |            |      |      |      |      |      |      |      |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &win_sleep
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans
            >;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_upperl {
            timeout-ms = <50>;
            key-positions = <56 57>;
            bindings = <&mo 5>;
        };

        combo_upperr {
            timeout-ms = <50>;
            key-positions = <62 63>;
            bindings = <&mo 5>;
        };
    };
};
